"use client";
import { useState, useEffect } from "react";
import Image from "next/image";
import { useRouter, useParams } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { Star, ShoppingCart, Heart, Share2, Truck, Shield, RotateCcw, Phone, Minus, Plus, Check } from "lucide-react";
import { useCart } from "@/hooks/use-cart";
import { toast } from "@/hooks/use-toast";
import { Product, ApiResponse, CartItem } from "@/types/supabase";
import { API_URL } from "@/lib/api";



export function ProductDetail() {
  const [product, setProduct] = useState<Product | null>(null);
  const [selectedImage, setSelectedImage] = useState(0);
  const [quantity, setQuantity] = useState(1);
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const { addToCart } = useCart();
  const params = useParams();
  const router = useRouter();

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        setError(null);
        const id = params.id; // Get product ID from URL params
        if (!id) {
          throw new Error("Product ID is missing");
        }
        const response = await fetch(`${API_URL}/api/products/${id}`, {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });
        const result: ApiResponse<Product> = await response.json();
        if (!response.ok) {
          throw new Error(result.message || "Failed to fetch product");
        }
        if (!result.success || !result.data) {
          throw new Error(result.message || "Product not found");
        }
        setProduct({
          ...result.data,
          in_stock: result.data.stock_quantity > 0, // Derive in_stock
          stock_count: result.data.stock_quantity, // Derive stock_count
        });
      } catch (err: any) {
        setError(err.message || "Failed to fetch product");
        toast({
          title: "Error",
          description: err.message || "Failed to fetch product",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    };
    fetchProduct();
  }, [params.id]);

  const handleAddToCart = async () => {
    if (!product) return;

    try {
      const cartItem: CartItem = {
        id: "", // Will be generated by the API
        cart_id: "", // Will be set by useCart or API
        product_id: product.id,
        quantity,
        price_at_time: product.price,
        name: product.name,
        price: product.price,
        image: product.thumbnail_image || product.images[0] || "/placeholder.svg",
        created_at: new Date().toISOString(),
      };
      await addToCart(cartItem);
      toast({
        title: "Added to Cart",
        description: `${product.name} has been added to your cart.`,
      });
    } catch (err: any) {
      toast({
        title: "Error",
        description: err.message || "Failed to add to cart",
        variant: "destructive",
      });
    }
  };

  const handleQuantityChange = (change: number) => {
    if (!product) return;
    setQuantity((prev) => {
      const newQuantity = prev + change;
      if (newQuantity < 1) return 1;
      if (newQuantity > (product.stock_count || product.stock_quantity)) return prev;
      return newQuantity;
    });
  };

  const handleWishlistToggle = async () => {
    if (!product) return;
    // TODO: Implement wishlist API call (may require authentication)
    setIsWishlisted(!isWishlisted);
    toast({
      title: isWishlisted ? "Removed from Wishlist" : "Added to Wishlist",
      description: `${product.name} has been ${isWishlisted ? "removed from" : "added to"} your wishlist.`,
    });
  };

  const handleShare = () => {
    navigator.clipboard.writeText(window.location.href);
    toast({
      title: "Link Copied",
      description: "Product URL copied to clipboard.",
    });
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8 text-center" aria-live="polite">
        Loading product...
      </div>
    );
  }

  if (error || !product) {
    return (
      <div className="container mx-auto px-4 py-8 text-center" aria-live="polite">
        <p className="text-red-500">{error || "Product not found"}</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-8 py-8">
      <div className="grid lg:grid-cols-2 gap-12">
        {/* Product Images */}
        <div className="space-y-4">
          <div className="aspect-square rounded-2xl overflow-hidden bg-gray-50">
            <Image
              src={product.images[selectedImage] || "/placeholder.svg"}
              alt={product.name}
              width={600}
              height={600}
              className="w-full h-full object-cover"
              onError={(e) => (e.currentTarget.src = "/placeholder.svg")}
            />
          </div>
          <div className="grid grid-cols-4 gap-4">
            {product.images.map((image, index) => (
              <button
                key={index}
                onClick={() => setSelectedImage(index)}
                className={`aspect-square rounded-lg overflow-hidden border-2 transition-colors ${
                  selectedImage === index ? "border-primary" : "border-gray-200"
                }`}
                aria-label={`View image ${index + 1} of ${product.name}`}
              >
                <Image
                  src={product.images[index] || "/placeholder.svg"}
                  alt={`${product.name} view ${index + 1}`}
                  width={150}
                  height={150}
                  className="w-full h-full object-cover"
                  onError={(e) => (e.currentTarget.src = "/placeholder.svg")}
                />
              </button>
            ))}
          </div>
        </div>
        {/* Product Info */}
        <div className="space-y-6">
          <div>
            {product.brand && (
              <Badge variant="secondary" className="mb-2">
                {product.brand}
              </Badge>
            )}
            <h1 className="text-3xl font-bold text-gray-900 mb-2">{product.name}</h1>
            {product.model && <p className="text-lg text-gray-600 mb-4">{product.model}</p>}
            <div className="flex items-center space-x-4 mb-6">
              <div className="text-3xl font-bold text-primary">${product.price.toLocaleString()}</div>
            </div>
            <div className="flex items-center space-x-2 mb-6">
              {product.in_stock ? (
                <>
                  <Check className="h-5 w-5 text-green-500" />
                  <span className="text-green-600 font-medium">
                    In Stock ({product.stock_count || product.stock_quantity} available)
                  </span>
                </>
              ) : (
                <span className="text-red-600 font-medium">Out of Stock</span>
              )}
            </div>
          </div>
          <Separator />
          {/* Quantity and Add to Cart */}
          <div className="space-y-4">
            <div className="flex items-center space-x-4">
              <label className="text-sm font-medium" htmlFor="quantity">
                Quantity:
              </label>
              <div className="flex items-center border border-gray-200 rounded-lg">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleQuantityChange(-1)}
                  disabled={quantity <= 1}
                  aria-label="Decrease quantity"
                >
                  <Minus className="h-4 w-4" />
                </Button>
                <span className="px-4 py-2 font-medium" id="quantity">
                  {quantity}
                </span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleQuantityChange(1)}
                  disabled={quantity >= (product.stock_count || product.stock_quantity)}
                  aria-label="Increase quantity"
                >
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
            </div>
            <div className="flex space-x-4">
              <Button
                size="lg"
                className="flex-1 border border-gray-200 hover:bg-gray-100"
                onClick={handleAddToCart}
                disabled={!product.in_stock}
                aria-label={`Add ${product.name} to cart`}
              >
                <ShoppingCart className="h-5 w-5 mr-2" />
                Add to Cart
              </Button>
              <Button
                className="border border-gray-200 hover:bg-gray-100"
                variant="outline"
                size="lg"
                onClick={handleShare}
                aria-label={`Share ${product.name}`}
              >
                <Share2 className="h-5 w-5" />
              </Button>
            </div>
          </div>
          <Separator />
          {/* Features */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-24">
            <div className="flex items-center space-x-3 p-4 bg-green-50 rounded-lg">
              <Truck className="h-6 w-6 text-green-600" />
              <div>
                <div className="font-medium text-green-900">Free Shipping</div>
                <div className="text-sm text-green-700">On orders over $500</div>
              </div>
            </div>
            <div className="flex items-center space-x-3 p-4 bg-blue-50 rounded-lg">
              <Shield className="h-6 w-6 text-blue-600" />
              <div>
                <div className="font-medium text-blue-900">2 Year Warranty</div>
                <div className="text-sm text-blue-700">Manufacturer warranty</div>
              </div>
            </div>
            <div className="flex items-center space-x-3 p-4 bg-purple-50 rounded-lg">
              <RotateCcw className="h-6 w-6 text-purple-600" />
              <div>
                <div className="font-medium text-purple-900">30-Day Returns</div>
                <div className="text-sm text-purple-700">Easy returns policy</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Product Details Tabs */}
      <div className="mt-16">
        <Tabs defaultValue="description" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger className="py-4 hover:bg-gray-100" value="description">
              Description
            </TabsTrigger>
            <TabsTrigger className="py-4 hover:bg-gray-100" value="specifications">
              Specifications
            </TabsTrigger>
            <TabsTrigger className="py-4 hover:bg-gray-100" value="shipping">
              Shipping & Returns
            </TabsTrigger>
          </TabsList>
          <TabsContent value="description" className="mt-8">
            <Card className="border border-gray-200">
              <CardContent className="p-8">
                <h3 className="text-2xl font-bold mb-4">Product Description</h3>
                <p className="text-gray-700 mb-6 leading-relaxed">{product.description || "No description available"}</p>
                {product.features && product.features.length > 0 && (
                  <>
                    <h4 className="text-xl font-semibold mb-4">Key Features</h4>
                    <div className="grid md:grid-cols-2 gap-4">
                      {product.features.map((feature, index) => (
                        <div key={index} className="flex items-start space-x-3">
                          <Check className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                          <span className="text-gray-700">{feature}</span>
                        </div>
                      ))}
                    </div>
                  </>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="specifications" className="mt-8">
            <Card className="border border-gray-200">
              <CardContent className="p-8">
                <h3 className="text-2xl font-bold mb-6">Technical Specifications</h3>
                {product.specifications && Object.keys(product.specifications).length > 0 ? (
                  <div className="grid gap-4">
                    {Object.entries(product.specifications).map(([key, value]) => (
                      <div key={key} className="flex justify-between py-3 border-b border-gray-200 last:border-b-0">
                        <span className="font-medium text-gray-900">{key}</span>
                        <span className="text-gray-700">{value}</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-700">No specifications available</p>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="shipping" className="mt-8">
            <Card className="border border-gray-200">
              <CardContent className="p-8">
                <h3 className="text-2xl font-bold mb-6">Shipping & Returns</h3>
                <div className="space-y-6">
                  <div>
                    <h4 className="text-lg font-semibold mb-3">Shipping Information</h4>
                    <ul className="space-y-2 text-gray-700">
                      <li>• Free shipping on orders over $500</li>
                      <li>• Standard delivery: 3-5 business days</li>
                      <li>• Express delivery: 1-2 business days (additional charges apply)</li>
                      <li>• International shipping available</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="text-lg font-semibold mb-3">Returns Policy</h4>
                    <ul className="space-y-2 text-gray-700">
                      <li>• 30-day return policy</li>
                      <li>• Items must be in original condition</li>
                      <li>• Return shipping costs may apply</li>
                      <li>• Refunds processed within 5-7 business days</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}